<div class="container">
  <h1>SignalTree Middleware Demo</h1>

  <div class="demo-grid-3col">
    <!-- Middleware Controls -->
    <div class="card">
      <h2>Middleware Controls</h2>

      <div class="middleware-panel">
        <h3>Enable Middleware</h3>
        <div class="middleware-toggles">
          <label
            class="middleware-toggle"
            [class.active]="enableLogging"
          >
            <div class="toggle-content">
              <input
                type="checkbox"
                [(ngModel)]="enableLogging"
              />
              <span>üîç Logging Middleware</span>
            </div>
            <span
              class="toggle-badge"
              [class.on]="enableLogging"
              [class.off]="!enableLogging"
            >
              {{ enableLogging ? 'ON' : 'OFF' }}
            </span>
          </label>

          <label
            class="middleware-toggle"
            [class.active]="enableValidation"
          >
            <div class="toggle-content">
              <input
                type="checkbox"
                [(ngModel)]="enableValidation"
              />
              <span>‚úÖ Validation Middleware</span>
            </div>
            <span
              class="toggle-badge"
              [class.on]="enableValidation"
              [class.off]="!enableValidation"
            >
              {{ enableValidation ? 'ON' : 'OFF' }}
            </span>
          </label>

          <label
            class="middleware-toggle"
            [class.active]="enablePersistence"
          >
            <div class="toggle-content">
              <input
                type="checkbox"
                [(ngModel)]="enablePersistence"
              />
              <span>üíæ Persistence Middleware</span>
            </div>
            <span
              class="toggle-badge"
              [class.on]="enablePersistence"
              [class.off]="!enablePersistence"
            >
              {{ enablePersistence ? 'ON' : 'OFF' }}
            </span>
          </label>

          <label
            class="middleware-toggle"
            [class.active]="enableUndo"
          >
            <div class="toggle-content">
              <input
                type="checkbox"
                [(ngModel)]="enableUndo"
              />
              <span>‚Ü∂ Undo/Redo Middleware</span>
            </div>
            <span
              class="toggle-badge"
              [class.on]="enableUndo"
              [class.off]="!enableUndo"
            >
              {{ enableUndo ? 'ON' : 'OFF' }}
            </span>
          </label>
        </div>
      </div>

            <!-- Middleware Chain Visualization -->
            <div class="chain-panel">
              <h3 >Middleware Execution Chain</h3>
              <div class="action-buttons">
                <div class="text-xs text-gray-600 mb-2">
                  Order: {{ getActiveMiddlewareCount() }} middleware active
                </div>

                <!-- Start -->
                <div class="flex items-center gap-2">
                  <div
                    class="px-3 py-1 bg-blue-500 text-white rounded text-xs font-semibold"
                  >
                    Action Start
                  </div>
                  <div class="text-gray-400">‚Üí</div>
                </div>

                <!-- Logging -->
                <div
                  *ngIf="enableLogging"
                  class="flex items-center gap-2 ml-4 animate-fade-in"
                >
                  <div
                    class="px-3 py-1 bg-green-100 text-green-800 border border-green-300 rounded text-xs"
                  >
                    üîç Logging (Before)
                  </div>
                  <div class="text-gray-400">‚Üí</div>
                </div>

                <!-- Validation -->
                <div
                  *ngIf="enableValidation"
                  class="flex items-center gap-2 ml-8 animate-fade-in"
                >
                  <div
                    class="px-3 py-1 bg-green-100 text-green-800 border border-green-300 rounded text-xs"
                  >
                    ‚úÖ Validation
                  </div>
                  <div class="text-gray-400">‚Üí</div>
                </div>

                <!-- Core Action -->
                <div
                  class="flex items-center gap-2"
                  [class.ml-12]="enableLogging || enableValidation"
                >
                  <div
                    class="px-3 py-1 bg-purple-100 text-purple-800 border border-purple-300 rounded text-xs font-semibold"
                  >
                    Core Action
                  </div>
                  <div class="text-gray-400">‚Üí</div>
                </div>

                <!-- Persistence -->
                <div
                  *ngIf="enablePersistence"
                  class="flex items-center gap-2 ml-8 animate-fade-in"
                >
                  <div
                    class="px-3 py-1 bg-green-100 text-green-800 border border-green-300 rounded text-xs"
                  >
                    üíæ Persistence
                  </div>
                  <div class="text-gray-400">‚Üí</div>
                </div>

                <!-- Undo -->
                <div
                  *ngIf="enableUndo"
                  class="flex items-center gap-2 ml-4 animate-fade-in"
                >
                  <div
                    class="px-3 py-1 bg-green-100 text-green-800 border border-green-300 rounded text-xs"
                  >
                    ‚Ü∂ Undo Tracking
                  </div>
                  <div class="text-gray-400">‚Üí</div>
                </div>

                <!-- Logging After -->
                <div
                  *ngIf="enableLogging"
                  class="flex items-center gap-2 animate-fade-in"
                >
                  <div
                    class="px-3 py-1 bg-green-100 text-green-800 border border-green-300 rounded text-xs"
                  >
                    üîç Logging (After)
                  </div>
                  <div class="text-gray-400">‚Üí</div>
                </div>

                <!-- End -->
                <div class="flex items-center gap-2">
                  <div
                    class="px-3 py-1 bg-blue-500 text-white rounded text-xs font-semibold"
                  >
                    Action Complete
                  </div>
                </div>
              </div>
            </div>

            <div class="middleware-panel">
              <h3 >Quick Actions</h3>
              <div class="action-buttons">
                <button
                  (click)="addRandomTodo()"
                  class="btn-success"
                >
                  + Add Random Todo
                </button>

                <button
                  (click)="addInvalidTodo()"
                  class="btn-danger"
                >
                  + Add Invalid Todo (Test Validation)
                </button>

                <button
                  (click)="toggleRandomTodo()"
                  [disabled]="todos().length === 0"
                  class="btn-primary"
                >
                  ‚Üª Toggle Random Todo
                </button>

                <button
                  (click)="deleteRandomTodo()"
                  [disabled]="todos().length === 0"
                  class="btn-warning"
                >
                  √ó Delete Random Todo
                </button>
              </div>
            </div>

            <div class="middleware-panel" *ngIf="enableUndo">
              <h3 >Undo/Redo</h3>
              <div class="undo-controls">
                <button
                  (click)="undo()"
                  [disabled]="undoStack().length === 0"
                  class="btn-secondary btn-sm"
                >
                  ‚Ü∂ Undo ({{ undoStack().length }})
                </button>

                <button
                  (click)="redo()"
                  [disabled]="redoStack().length === 0"
                  class="btn-secondary btn-sm"
                >
                  ‚Ü∑ Redo ({{ redoStack().length }})
                </button>
              </div>
            </div>

            <div class="middleware-panel">
              <h3 >State Actions</h3>
              <div class="action-buttons">
                <button
                  (click)="clearAllTodos()"
                  [disabled]="todos().length === 0"
                  class="btn-danger"
                >
                  Clear All Todos
                </button>

                <button
                  (click)="clearLogs()"
                  [disabled]="middlewareLogs().length === 0"
                  class="btn-warning"
                >
                  Clear Logs
                </button>

                <button
                  (click)="loadFromStorage()"
                  class="btn-purple"
                >
                  Load from Storage
                </button>
              </div>
            </div>
          </div>
        </div>

        <!-- Todo List -->
        <div class="card">
          <h2 >Todo List</h2>

          <!-- Filter Tabs -->
          <div class="flex border-b mb-4">
            <button
              *ngFor="let f of ['all', 'active', 'completed']"
              (click)="setFilterFromString(f)"
              [class]="
                filter() === f
                  ? 'border-blue-500 text-blue-600'
                  : 'border-transparent text-gray-500'
              "
              class="px-4 py-2 border-b-2 text-sm font-medium hover:text-gray-700"
            >
              {{ f | titlecase }} ({{ getFilteredCount(f) }})
            </button>
          </div>

          <!-- Add Todo Form -->
          <div class="mb-4">
            <div class="undo-controls">
              <input
                type="text"
                [(ngModel)]="newTodoText"
                (keyup.enter)="addTodo()"
                placeholder="Add a new todo..."
                class="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
              <button
                (click)="addTodo()"
                [disabled]="!newTodoText.trim()"
                class="btn-primary"
              >
                Add
              </button>
            </div>
          </div>

          <!-- Todo Items -->
          <div class="space-y-2 max-h-64 overflow-y-auto">
            <div
              *ngFor="let todo of filteredTodos(); trackBy: trackTodo"
              class="flex items-center gap-3 p-3 border rounded-lg hover:bg-gray-50"
            >
              <input
                type="checkbox"
                [checked]="todo.completed"
                (change)="toggleTodo(todo.id)"
                class="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
              />

              <span
                [class]="
                  todo.completed
                    ? 'line-through text-gray-500'
                    : 'text-gray-900'
                "
                class="flex-1 text-sm"
              >
                {{ todo.title }}
              </span>

              <button
                (click)="deleteTodo(todo.id)"
                class="btn-danger btn-sm"
              >
                Delete
              </button>
            </div>
          </div>

          <div
            *ngIf="filteredTodos().length === 0"
            class="text-center text-gray-500 py-8"
          >
            {{
              filter() === 'all'
                ? 'No todos yet.'
                : 'No ' + filter() + ' todos.'
            }}
          </div>

          <!-- Stats -->
          <div class="mt-4 pt-4 border-t">
            <div class="stats-grid">
              <div>
                <div class="font-semibold text-blue-600">
                  {{ todos().length }}
                </div>
                <div class="text-gray-500">Total</div>
              </div>
              <div>
                <div class="font-semibold text-green-600">
                  {{ completedCount() }}
                </div>
                <div class="text-gray-500">Completed</div>
              </div>
              <div>
                <div class="font-semibold text-yellow-600">
                  {{ activeCount() }}
                </div>
                <div class="text-gray-500">Active</div>
              </div>
            </div>
          </div>
        </div>

        <!-- Middleware Logs -->
        <div class="card">
          <h2 >Middleware Logs</h2>

          <div class="space-y-2 max-h-80 overflow-y-auto">
            <div
              *ngFor="
                let log of middlewareLogs().slice().reverse();
                trackBy: trackLog
              "
              class="p-3 rounded-lg text-sm"
              [class]="getLogClass(log)"
            >
              <div class="flex items-center justify-between mb-1">
                <span class="font-medium">{{ log.action }}</span>
                <span class="text-xs opacity-75">{{
                  formatTime(log.timestamp)
                }}</span>
              </div>

              <div class="text-xs opacity-90">
                {{ log.type | titlecase }}
                <span *ngIf="log.duration">
                  ‚Ä¢ {{ log.duration.toFixed(1) }}ms</span
                >
                <span *ngIf="log.error"> ‚Ä¢ {{ log.error }}</span>
              </div>

              <div
                *ngIf="log.data && log.data['message']"
                class="text-xs mt-1 opacity-75"
              >
                {{ log.data['message'] }}
              </div>
            </div>
          </div>

          <div
            *ngIf="middlewareLogs().length === 0"
            class="text-center text-gray-500 py-8"
          >
            No middleware logs yet. Enable logging and perform some actions.
          </div>
        </div>
      </div>

      <!-- Undo Stack Visualization -->
      <div
        class="section-card"
        *ngIf="enableUndo && undoStack().length > 0"
      >
        <h2 >Undo Stack Visualization</h2>

        <div class="action-buttons">
          <div
            *ngFor="
              let entry of undoStack().slice().reverse();
              let i = index;
              trackBy: trackUndoEntry
            "
            class="flex items-center gap-4 p-3 bg-gray-50 rounded-lg"
          >
            <div
              class="w-8 h-8 bg-blue-500 text-white rounded-full flex items-center justify-center text-sm font-medium"
            >
              {{ undoStack().length - i }}
            </div>

            <div class="flex-1">
              <div class="font-medium text-sm">{{ entry.action }}</div>
              <div class="text-xs text-gray-500">
                {{ formatTime(entry.timestamp) }} ‚Ä¢
                {{ entry.previousState.length }} ‚Üí
                {{ entry.newState.length }} todos
              </div>
            </div>

            <div class="text-xs text-gray-400">
              {{ getUndoChangeDescription(entry) }}
            </div>
          </div>
        </div>
      </div>

      <!-- Features Explanation -->
      <div class="section-card features-card">
        <h2 >
          Middleware Features Demonstrated
        </h2>
        <div class="features-grid">
          <div>
            <h3 class="font-medium text-indigo-800 mb-2">Logging Middleware</h3>
            <p class="text-sm text-indigo-700">
              Automatically logs all state changes with timing information and
              action details.
            </p>
          </div>
          <div>
            <h3 class="font-medium text-indigo-800 mb-2">
              Validation Middleware
            </h3>
            <p class="text-sm text-indigo-700">
              Validates data before state changes, preventing invalid operations
              and maintaining data integrity.
            </p>
          </div>
          <div>
            <h3 class="font-medium text-indigo-800 mb-2">
              Persistence Middleware
            </h3>
            <p class="text-sm text-indigo-700">
              Automatically saves state changes to local storage for data
              persistence across sessions.
            </p>
          </div>
          <div>
            <h3 class="font-medium text-indigo-800 mb-2">
              Undo/Redo Middleware
            </h3>
            <p class="text-sm text-indigo-700">
              Tracks state changes and provides undo/redo functionality with
              configurable history limits.
            </p>
          </div>
        </div>
      </div>
